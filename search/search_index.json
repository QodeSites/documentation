{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Software Documentation Welcome to the software documentation! This guide outlines the framework, technologies, integration, and development standards we are using to build and deploy our software. Below is an overview of the key sections: Framework Overview Product Purpose, usage, scalability, key features, and target audience. Technology Discussion on the technologies and frameworks used (e.g., React, Next.js) and the reasons behind these choices, such as performance, scalability, and ease of understanding. Styling will be done using Tailwind CSS. Integration Details on where the frameworks (e.g., React) are executed, what server is used, and the reasoning behind these choices. Folder Structure An explanation of the structured, understandable, and scalable folder setup used in the project. API and Backend Communication Overview of the API architecture (REST), endpoint documentation, authentication and authorization methods, error handling, and security measures for API key storage. Unified Styling Standard Guidelines to maintain consistent styles across all pages and components, including how styling should be applied. Deployment Process Details on the build script, deployment to VPS, and Nginx configuration setup. Documentation A guide to documenting each hook, working strategy, and function used in the project. Open Source Tools Usage of open-source tools whenever required and as applicable. Third-party Integrations A list of external services and libraries, including their purposes and configuration details. Branching Strategy Details on the branching strategy where code is first pushed to a development branch before merging into the main/production branch to keep the production environment stable until final approval. Development Guidelines Coding standards, best practices for component development, and documentation requirements for new features. Explore each section by clicking the links to delve deeper into our software's documentation framework and development practices.","title":"Home"},{"location":"#software-documentation","text":"Welcome to the software documentation! This guide outlines the framework, technologies, integration, and development standards we are using to build and deploy our software. Below is an overview of the key sections:","title":"Software Documentation"},{"location":"#framework-overview","text":"Product Purpose, usage, scalability, key features, and target audience. Technology Discussion on the technologies and frameworks used (e.g., React, Next.js) and the reasons behind these choices, such as performance, scalability, and ease of understanding. Styling will be done using Tailwind CSS. Integration Details on where the frameworks (e.g., React) are executed, what server is used, and the reasoning behind these choices. Folder Structure An explanation of the structured, understandable, and scalable folder setup used in the project. API and Backend Communication Overview of the API architecture (REST), endpoint documentation, authentication and authorization methods, error handling, and security measures for API key storage. Unified Styling Standard Guidelines to maintain consistent styles across all pages and components, including how styling should be applied. Deployment Process Details on the build script, deployment to VPS, and Nginx configuration setup. Documentation A guide to documenting each hook, working strategy, and function used in the project. Open Source Tools Usage of open-source tools whenever required and as applicable. Third-party Integrations A list of external services and libraries, including their purposes and configuration details. Branching Strategy Details on the branching strategy where code is first pushed to a development branch before merging into the main/production branch to keep the production environment stable until final approval. Development Guidelines Coding standards, best practices for component development, and documentation requirements for new features. Explore each section by clicking the links to delve deeper into our software's documentation framework and development practices.","title":"Framework Overview"},{"location":"about/","text":"","title":"About"},{"location":"api-backend-communication/","text":"5. api-backend-communication.md API and Backend Communication API Architecture Type : RESTful API Endpoints : List of key endpoints with descriptions of their functionality. Authentication and Authorization Methods : Use of JWT (JSON Web Tokens) for secure authentication and role-based access control. Error Handling Detailed error handling procedures, including how to handle common error codes and edge cases. Security Measures API Key Storage : Use environment variables and secure storage for API keys. Encryption : All sensitive data transmission is encrypted using HTTPS.","title":"API and Backend Communication"},{"location":"api-backend-communication/#5-api-backend-communicationmd","text":"","title":"5. api-backend-communication.md"},{"location":"api-backend-communication/#api-and-backend-communication","text":"","title":"API and Backend Communication"},{"location":"api-backend-communication/#api-architecture","text":"Type : RESTful API Endpoints : List of key endpoints with descriptions of their functionality.","title":"API Architecture"},{"location":"api-backend-communication/#authentication-and-authorization","text":"Methods : Use of JWT (JSON Web Tokens) for secure authentication and role-based access control.","title":"Authentication and Authorization"},{"location":"api-backend-communication/#error-handling","text":"Detailed error handling procedures, including how to handle common error codes and edge cases.","title":"Error Handling"},{"location":"api-backend-communication/#security-measures","text":"API Key Storage : Use environment variables and secure storage for API keys. Encryption : All sensitive data transmission is encrypted using HTTPS.","title":"Security Measures"},{"location":"branching-strategy/","text":"Branching Strategy Overview To maintain a stable production environment, all code changes must first be pushed to the dev branch before being merged into the main (production) branch. Workflow Feature Development : New features and fixes are developed in individual feature branches off the dev branch. Code Review : Changes are reviewed and tested in the dev branch. Merge to Main : Once approved, changes are merged into the main branch and deployed to production. Best Practices Always keep branches up-to-date with the latest dev changes. Use descriptive names for branches (e.g., feature/add-login , fix/bug-123 ).","title":"Branching Strategy"},{"location":"branching-strategy/#branching-strategy","text":"","title":"Branching Strategy"},{"location":"branching-strategy/#overview","text":"To maintain a stable production environment, all code changes must first be pushed to the dev branch before being merged into the main (production) branch.","title":"Overview"},{"location":"branching-strategy/#workflow","text":"Feature Development : New features and fixes are developed in individual feature branches off the dev branch. Code Review : Changes are reviewed and tested in the dev branch. Merge to Main : Once approved, changes are merged into the main branch and deployed to production.","title":"Workflow"},{"location":"branching-strategy/#best-practices","text":"Always keep branches up-to-date with the latest dev changes. Use descriptive names for branches (e.g., feature/add-login , fix/bug-123 ).","title":"Best Practices"},{"location":"deployment-process/","text":"Deployment Process Build Script Build-script.sh : A shell script that automates the build process, including compiling the application, running tests, and preparing the app for deployment. Deployment Steps Build the Project : Run the build script to compile the application. Deploy to VPS : Deploy the built application to the Virtual Private Server. Set Up Nginx : Configure Nginx to serve the application, including setting up the necessary proxy rules and SSL certificates. Going Live Detailed steps for taking the application live, including DNS settings and monitoring configurations.","title":"Deployment Process"},{"location":"deployment-process/#deployment-process","text":"","title":"Deployment Process"},{"location":"deployment-process/#build-script","text":"Build-script.sh : A shell script that automates the build process, including compiling the application, running tests, and preparing the app for deployment.","title":"Build Script"},{"location":"deployment-process/#deployment-steps","text":"Build the Project : Run the build script to compile the application. Deploy to VPS : Deploy the built application to the Virtual Private Server. Set Up Nginx : Configure Nginx to serve the application, including setting up the necessary proxy rules and SSL certificates.","title":"Deployment Steps"},{"location":"deployment-process/#going-live","text":"Detailed steps for taking the application live, including DNS settings and monitoring configurations.","title":"Going Live"},{"location":"development-guidelines/","text":"Development Guidelines Coding Standards Follow JavaScript ES6+ standards. Use consistent naming conventions (camelCase for variables, PascalCase for components). Best Practices for Component Development Keep components small and focused on a single responsibility. Reuse components wherever possible to avoid duplication. Documentation Requirements All new features should include accompanying documentation. Document the purpose, usage, and any important details for each new component or feature. Additional Guidelines Write unit tests for critical components and functions. Use version control effectively, including meaningful commit messages.","title":"Development Guidelines"},{"location":"development-guidelines/#development-guidelines","text":"","title":"Development Guidelines"},{"location":"development-guidelines/#coding-standards","text":"Follow JavaScript ES6+ standards. Use consistent naming conventions (camelCase for variables, PascalCase for components).","title":"Coding Standards"},{"location":"development-guidelines/#best-practices-for-component-development","text":"Keep components small and focused on a single responsibility. Reuse components wherever possible to avoid duplication.","title":"Best Practices for Component Development"},{"location":"development-guidelines/#documentation-requirements","text":"All new features should include accompanying documentation. Document the purpose, usage, and any important details for each new component or feature.","title":"Documentation Requirements"},{"location":"development-guidelines/#additional-guidelines","text":"Write unit tests for critical components and functions. Use version control effectively, including meaningful commit messages.","title":"Additional Guidelines"},{"location":"documentation/","text":"Documentation Purpose Thorough documentation of each hook, working strategy, and function is essential for maintainability and knowledge sharing. Key Areas to Document Hooks : Custom React hooks and their usage. Functions : Key functions and their roles within the application. Strategies : Overall strategies employed in different modules. Documentation Standards Use clear and concise language. Include code examples wherever applicable. Ensure consistency in documentation formatting.","title":"Documentation"},{"location":"documentation/#documentation","text":"","title":"Documentation"},{"location":"documentation/#purpose","text":"Thorough documentation of each hook, working strategy, and function is essential for maintainability and knowledge sharing.","title":"Purpose"},{"location":"documentation/#key-areas-to-document","text":"Hooks : Custom React hooks and their usage. Functions : Key functions and their roles within the application. Strategies : Overall strategies employed in different modules.","title":"Key Areas to Document"},{"location":"documentation/#documentation-standards","text":"Use clear and concise language. Include code examples wherever applicable. Ensure consistency in documentation formatting.","title":"Documentation Standards"},{"location":"folder-structure/","text":"Folder Structure Overview The folder structure is designed to be scalable, understandable, and easy to navigate. Below is an outline of the key directories and their purposes: src/ \u251c\u2500\u2500 components/ # Reusable UI components \u2502 \u251c\u2500\u2500 common/ # Commonly used components like Button, Heading \u2502 \u251c\u2500\u2500 layout/ # Layout components such as Header, Footer \u2502 \u251c\u2500\u2500 charts/ # Chart components \u2502 \u251c\u2500\u2500 PythonCalculator/ # Specific component example \u251c\u2500\u2500 pages/ # Next.js pages \u251c\u2500\u2500 hooks/ # Custom React hooks \u251c\u2500\u2500 services/ # Services and API calls \u2502 \u2514\u2500\u2500 api/ # API integration \u251c\u2500\u2500 utils/ # Utility functions \u251c\u2500\u2500 styles/ # Global and component-specific styles \u2502 \u251c\u2500\u2500 global.css \u2502 \u2514\u2500\u2500 components.css","title":"Folder Structure"},{"location":"folder-structure/#folder-structure","text":"","title":"Folder Structure"},{"location":"folder-structure/#overview","text":"The folder structure is designed to be scalable, understandable, and easy to navigate. Below is an outline of the key directories and their purposes: src/ \u251c\u2500\u2500 components/ # Reusable UI components \u2502 \u251c\u2500\u2500 common/ # Commonly used components like Button, Heading \u2502 \u251c\u2500\u2500 layout/ # Layout components such as Header, Footer \u2502 \u251c\u2500\u2500 charts/ # Chart components \u2502 \u251c\u2500\u2500 PythonCalculator/ # Specific component example \u251c\u2500\u2500 pages/ # Next.js pages \u251c\u2500\u2500 hooks/ # Custom React hooks \u251c\u2500\u2500 services/ # Services and API calls \u2502 \u2514\u2500\u2500 api/ # API integration \u251c\u2500\u2500 utils/ # Utility functions \u251c\u2500\u2500 styles/ # Global and component-specific styles \u2502 \u251c\u2500\u2500 global.css \u2502 \u2514\u2500\u2500 components.css","title":"Overview"},{"location":"integration/","text":"Integration Execution Environment Frontend Execution : React is executed on the client-side, with Next.js handling server-side rendering for optimized performance. Backend Integration : Our backend is powered by Node.js, providing a seamless integration with the frontend via RESTful APIs. Server Configuration Server : Nginx serves as our web server, chosen for its high performance and ability to handle concurrent connections efficiently. Deployment : Applications are deployed on a VPS (Virtual Private Server) for full control over the environment and better scalability options.","title":"Integration"},{"location":"integration/#integration","text":"","title":"Integration"},{"location":"integration/#execution-environment","text":"Frontend Execution : React is executed on the client-side, with Next.js handling server-side rendering for optimized performance. Backend Integration : Our backend is powered by Node.js, providing a seamless integration with the frontend via RESTful APIs.","title":"Execution Environment"},{"location":"integration/#server-configuration","text":"Server : Nginx serves as our web server, chosen for its high performance and ability to handle concurrent connections efficiently. Deployment : Applications are deployed on a VPS (Virtual Private Server) for full control over the environment and better scalability options.","title":"Server Configuration"},{"location":"open-source-tools/","text":"Open Source Tools Overview We prioritize using open-source tools wherever feasible to leverage community support and reduce costs. Key Tools Used React : Frontend library for building user interfaces. Next.js : Framework for server-rendered React applications. Tailwind CSS : Utility-first CSS framework for rapid UI development. Additional Tools List other open-source libraries and tools used in the project, along with their purposes.","title":"Open Source Tools"},{"location":"open-source-tools/#open-source-tools","text":"","title":"Open Source Tools"},{"location":"open-source-tools/#overview","text":"We prioritize using open-source tools wherever feasible to leverage community support and reduce costs.","title":"Overview"},{"location":"open-source-tools/#key-tools-used","text":"React : Frontend library for building user interfaces. Next.js : Framework for server-rendered React applications. Tailwind CSS : Utility-first CSS framework for rapid UI development.","title":"Key Tools Used"},{"location":"open-source-tools/#additional-tools","text":"List other open-source libraries and tools used in the project, along with their purposes.","title":"Additional Tools"},{"location":"product/","text":"Product Purpose This section explains the purpose of the product, including the problems it aims to solve and the benefits it provides to users. Usage Details on how the product should be used, including common use cases and scenarios. Level of Scalability Information on the scalability of the product, including its ability to handle increased loads or scale horizontally and vertically. Key Features Feature 1: Description Feature 2: Description Feature 3: Description Target Audience A detailed description of the intended users of the product, including personas and key demographics.","title":"Product"},{"location":"product/#product","text":"","title":"Product"},{"location":"product/#purpose","text":"This section explains the purpose of the product, including the problems it aims to solve and the benefits it provides to users.","title":"Purpose"},{"location":"product/#usage","text":"Details on how the product should be used, including common use cases and scenarios.","title":"Usage"},{"location":"product/#level-of-scalability","text":"Information on the scalability of the product, including its ability to handle increased loads or scale horizontally and vertically.","title":"Level of Scalability"},{"location":"product/#key-features","text":"Feature 1: Description Feature 2: Description Feature 3: Description","title":"Key Features"},{"location":"product/#target-audience","text":"A detailed description of the intended users of the product, including personas and key demographics.","title":"Target Audience"},{"location":"styling-standard/","text":"Unified Styling Standard Styling Approach Consistent Styles : Maintain similar styles across all pages and components to ensure a unified look and feel. Utility Classes : Use Tailwind CSS for utility classes that promote consistency and reduce custom CSS. Best Practices Component-Specific Styles : Styles should be scoped to components to avoid global CSS pollution. Theme Consistency : Adhere to a predefined color palette, typography, and spacing guidelines throughout the application.","title":"Unified Styling Standard"},{"location":"styling-standard/#unified-styling-standard","text":"","title":"Unified Styling Standard"},{"location":"styling-standard/#styling-approach","text":"Consistent Styles : Maintain similar styles across all pages and components to ensure a unified look and feel. Utility Classes : Use Tailwind CSS for utility classes that promote consistency and reduce custom CSS.","title":"Styling Approach"},{"location":"styling-standard/#best-practices","text":"Component-Specific Styles : Styles should be scoped to components to avoid global CSS pollution. Theme Consistency : Adhere to a predefined color palette, typography, and spacing guidelines throughout the application.","title":"Best Practices"},{"location":"technology/","text":"Technology Technology Stack We have chosen the following technologies and frameworks for our software: Frontend React : Chosen for its component-based architecture, performance, and large community. Next.js : Utilized for server-side rendering, better performance, and SEO optimization. Styling Tailwind CSS : For utility-first CSS, which allows rapid development with a consistent design system. Why These Technologies? React : Offers a scalable folder structure and easy-to-understand component architecture. Tailwind CSS : Provides a unified styling approach, reducing the need for custom CSS.","title":"Technology"},{"location":"technology/#technology","text":"","title":"Technology"},{"location":"technology/#technology-stack","text":"We have chosen the following technologies and frameworks for our software:","title":"Technology Stack"},{"location":"technology/#frontend","text":"React : Chosen for its component-based architecture, performance, and large community. Next.js : Utilized for server-side rendering, better performance, and SEO optimization.","title":"Frontend"},{"location":"technology/#styling","text":"Tailwind CSS : For utility-first CSS, which allows rapid development with a consistent design system.","title":"Styling"},{"location":"technology/#why-these-technologies","text":"React : Offers a scalable folder structure and easy-to-understand component architecture. Tailwind CSS : Provides a unified styling approach, reducing the need for custom CSS.","title":"Why These Technologies?"},{"location":"third-party-integrations/","text":"Third-Party Integrations Overview This section details the external services and libraries integrated into the project, including their purposes and configurations. Key Integrations Analytics : Google Analytics for tracking user interactions. Authentication : Auth0 for secure user authentication. Payment Processing : Stripe for handling online payments. Configuration Configuration steps for each integration, including API keys and callback URLs.","title":"Third-party Integrations"},{"location":"third-party-integrations/#third-party-integrations","text":"","title":"Third-Party Integrations"},{"location":"third-party-integrations/#overview","text":"This section details the external services and libraries integrated into the project, including their purposes and configurations.","title":"Overview"},{"location":"third-party-integrations/#key-integrations","text":"Analytics : Google Analytics for tracking user interactions. Authentication : Auth0 for secure user authentication. Payment Processing : Stripe for handling online payments.","title":"Key Integrations"},{"location":"third-party-integrations/#configuration","text":"Configuration steps for each integration, including API keys and callback URLs.","title":"Configuration"}]}